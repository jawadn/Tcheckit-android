package com.tcheckit.wsdl;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 2/21/2014 7:29:15 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import java.util.Hashtable;

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import com.tcheckit.wsdl.WS_Enums.flag;

public class mission implements KvmSerializable {
    
    public long id;
    public boolean idSpecified;
    public VectorphotoInstruction listPhotoInstruction;
    public Vectormedia listPhotosProducts;
    public Vectorquestion listQuestions;
    public Vectorsign listSign;
    public brand oneBrand;
    public String oneDescription;
    public String oneMoreText;
    public pageContent onePageContentMain;
    public float onePrice;
    public boolean onePriceSpecified;
    public String oneTitle;
    public String dateCreated;
    public boolean dateCreatedSpecified;
    public String dateDeleted;
    public boolean dateDeletedSpecified;
    public String dateUpdated;
    public boolean dateUpdatedSpecified;
    public flag oneFlag;
    public boolean oneFlagSpecified;
    
    public mission(){}
    
    public mission(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("id"))
        {
            Object obj = soapObject.getProperty("id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                id = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                id = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("idSpecified"))
        {
            Object obj = soapObject.getProperty("idSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                idSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                idSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("listPhotoInstruction"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("listPhotoInstruction");
            listPhotoInstruction = new VectorphotoInstruction(j);
        }
        if (soapObject.hasProperty("listPhotosProducts"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("listPhotosProducts");
            listPhotosProducts = new Vectormedia(j);
        }
        if (soapObject.hasProperty("listQuestions"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("listQuestions");
            listQuestions = new Vectorquestion(j);
        }
        if (soapObject.hasProperty("listSign"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("listSign");
            listSign = new Vectorsign(j);
        }
        if (soapObject.hasProperty("oneBrand"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("oneBrand");
            oneBrand =  new brand (j);
            
        }
        if (soapObject.hasProperty("oneDescription"))
        {
            Object obj = soapObject.getProperty("oneDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                oneDescription = j.toString();
            }else if (obj!= null && obj instanceof String){
                oneDescription = (String) obj;
            }
        }
        if (soapObject.hasProperty("oneMoreText"))
        {
            Object obj = soapObject.getProperty("oneMoreText");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                oneMoreText = j.toString();
            }else if (obj!= null && obj instanceof String){
                oneMoreText = (String) obj;
            }
        }
        if (soapObject.hasProperty("onePageContentMain"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("onePageContentMain");
            onePageContentMain =  new pageContent (j);
            
        }
        if (soapObject.hasProperty("onePrice"))
        {
            Object obj = soapObject.getProperty("onePrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                onePrice = Float.parseFloat(j.toString());
            }else if (obj!= null && obj instanceof Number){
                onePrice = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("onePriceSpecified"))
        {
            Object obj = soapObject.getProperty("onePriceSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                onePriceSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                onePriceSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("oneTitle"))
        {
            Object obj = soapObject.getProperty("oneTitle");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                oneTitle = j.toString();
            }else if (obj!= null && obj instanceof String){
                oneTitle = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateCreated"))
        {
            Object obj = soapObject.getProperty("dateCreated");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateCreated = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateCreated = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateCreatedSpecified"))
        {
            Object obj = soapObject.getProperty("dateCreatedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateCreatedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateCreatedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("dateDeleted"))
        {
            Object obj = soapObject.getProperty("dateDeleted");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateDeleted = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateDeleted = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateDeletedSpecified"))
        {
            Object obj = soapObject.getProperty("dateDeletedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateDeletedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateDeletedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("dateUpdated"))
        {
            Object obj = soapObject.getProperty("dateUpdated");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateUpdated = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateUpdated = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateUpdatedSpecified"))
        {
            Object obj = soapObject.getProperty("dateUpdatedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateUpdatedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateUpdatedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("oneFlag"))
        {
            Object obj = soapObject.getProperty("oneFlag");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive)obj;
                oneFlag = flag.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("oneFlagSpecified"))
        {
            Object obj = soapObject.getProperty("oneFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                oneFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                oneFlagSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return id;
            case 1:
                return idSpecified;
            case 2:
                return listPhotoInstruction;
            case 3:
                return listPhotosProducts;
            case 4:
                return listQuestions;
            case 5:
                return listSign;
            case 6:
                return oneBrand;
            case 7:
                return oneDescription;
            case 8:
                return oneMoreText;
            case 9:
                return onePageContentMain;
            case 10:
                return onePrice;
            case 11:
                return onePriceSpecified;
            case 12:
                return oneTitle;
            case 13:
                return dateCreated;
            case 14:
                return dateCreatedSpecified;
            case 15:
                return dateDeleted;
            case 16:
                return dateDeletedSpecified;
            case 17:
                return dateUpdated;
            case 18:
                return dateUpdatedSpecified;
            case 19:
                return oneFlag.toString();
            case 20:
                return oneFlagSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 21;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = Long.class;
                info.name = "id";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "idSpecified";
                break;
            case 2:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "listPhotoInstruction";
                break;
            case 3:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "listPhotosProducts";
                break;
            case 4:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "listQuestions";
                break;
            case 5:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "listSign";
                break;
            case 6:
                info.type = brand.class;
                info.name = "oneBrand";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "oneDescription";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "oneMoreText";
                break;
            case 9:
                info.type = pageContent.class;
                info.name = "onePageContentMain";
                break;
            case 10:
                info.type = Float.class;
                info.name = "onePrice";
                break;
            case 11:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "onePriceSpecified";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "oneTitle";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dateCreated";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dateCreatedSpecified";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dateDeleted";
                break;
            case 16:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dateDeletedSpecified";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dateUpdated";
                break;
            case 18:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dateUpdatedSpecified";
                break;
            case 19:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "oneFlag";
                break;
            case 20:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "oneFlagSpecified";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
