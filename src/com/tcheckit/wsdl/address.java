package com.tcheckit.wsdl;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 2/21/2014 7:29:15 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import java.util.Hashtable;

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class address implements KvmSerializable {
    
    public String city;
    public String country;
    public float latitude;
    public boolean latitudeSpecified;
    public float longitude;
    public boolean longitudeSpecified;
    public String postalCode;
    public String region;
    public String street;
    public String street2;
    
    public address(){}
    
    public address(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("city"))
        {
            Object obj = soapObject.getProperty("city");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                city = j.toString();
            }else if (obj!= null && obj instanceof String){
                city = (String) obj;
            }
        }
        if (soapObject.hasProperty("country"))
        {
            Object obj = soapObject.getProperty("country");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                country = j.toString();
            }else if (obj!= null && obj instanceof String){
                country = (String) obj;
            }
        }
        if (soapObject.hasProperty("latitude"))
        {
            Object obj = soapObject.getProperty("latitude");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                latitude = Float.parseFloat(j.toString());
            }else if (obj!= null && obj instanceof Number){
                latitude = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("latitudeSpecified"))
        {
            Object obj = soapObject.getProperty("latitudeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                latitudeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                latitudeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("longitude"))
        {
            Object obj = soapObject.getProperty("longitude");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                longitude = Float.parseFloat(j.toString());
            }else if (obj!= null && obj instanceof Number){
                longitude = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("longitudeSpecified"))
        {
            Object obj = soapObject.getProperty("longitudeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                longitudeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                longitudeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("postalCode"))
        {
            Object obj = soapObject.getProperty("postalCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                postalCode = j.toString();
            }else if (obj!= null && obj instanceof String){
                postalCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("region"))
        {
            Object obj = soapObject.getProperty("region");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                region = j.toString();
            }else if (obj!= null && obj instanceof String){
                region = (String) obj;
            }
        }
        if (soapObject.hasProperty("street"))
        {
            Object obj = soapObject.getProperty("street");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                street = j.toString();
            }else if (obj!= null && obj instanceof String){
                street = (String) obj;
            }
        }
        if (soapObject.hasProperty("street2"))
        {
            Object obj = soapObject.getProperty("street2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                street2 = j.toString();
            }else if (obj!= null && obj instanceof String){
                street2 = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return city;
            case 1:
                return country;
            case 2:
                return latitude;
            case 3:
                return latitudeSpecified;
            case 4:
                return longitude;
            case 5:
                return longitudeSpecified;
            case 6:
                return postalCode;
            case 7:
                return region;
            case 8:
                return street;
            case 9:
                return street2;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 10;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "city";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "country";
                break;
            case 2:
                info.type = Float.class;
                info.name = "latitude";
                break;
            case 3:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "latitudeSpecified";
                break;
            case 4:
                info.type = Float.class;
                info.name = "longitude";
                break;
            case 5:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "longitudeSpecified";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "postalCode";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "region";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "street";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "street2";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
