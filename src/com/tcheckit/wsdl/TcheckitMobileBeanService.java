package com.tcheckit.wsdl;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 2/21/2014 7:29:15 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import java.util.List;

import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.MarshalFloat;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;

import android.os.AsyncTask;

import com.tcheckit.wsdl.WS_Enums.SoapProtocolVersion;

public class TcheckitMobileBeanService {
    
    public String NAMESPACE ="http://sessions.ejb.tcheckit.fortutech.com/";
    public String url="http://preprod.wsservices.fortutech.com/Tcheckit-EJB/TcheckitMobileBean";
    public int timeOut = 60000;
    public IWsdl2CodeEvents eventHandler;
    public SoapProtocolVersion soapVersion;
    
    public TcheckitMobileBeanService(){}
    
    public TcheckitMobileBeanService(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public TcheckitMobileBeanService(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public TcheckitMobileBeanService(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(String url){
        this.url = url;
    }
    public void getListReponseQuestionMultipleChoiceAsync(responseQuestionMultipleChoice arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getListReponseQuestionMultipleChoiceAsync(arg0, null);
    }
    
    public void getListReponseQuestionMultipleChoiceAsync(final responseQuestionMultipleChoice arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getListReponseQuestionMultipleChoice(arg0, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getListReponseQuestionMultipleChoice", result);
                }
            }
        }.execute();
    }
    
    public void getListReponseQuestionMultipleChoice(responseQuestionMultipleChoice arg0){
        getListReponseQuestionMultipleChoice(arg0, null);
    }
    
    public void getListReponseQuestionMultipleChoice(responseQuestionMultipleChoice arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getListReponseQuestionMultipleChoice");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new responseQuestionMultipleChoice().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListReponseQuestionMultipleChoice", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListReponseQuestionMultipleChoice", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getListMissionsAsync() throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getListMissionsAsync(null);
    }
    
    public void getListMissionsAsync(final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectormission>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectormission doInBackground(Void... params) {
                return getListMissions(headers);
            }
            @Override
            protected void onPostExecute(Vectormission result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getListMissions", result);
                }
            }
        }.execute();
    }
    
    public Vectormission getListMissions(){
        return getListMissions(null);
    }
    
    public Vectormission getListMissions(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getListMissions");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListMissions", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListMissions", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectormission resultVariable = new Vectormission(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void distFromAsync(float arg0,float arg1,float arg2,float arg3) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        distFromAsync(arg0, arg1, arg2, arg3, null);
    }
    
    public void distFromAsync(final float arg0,final float arg1,final float arg2,final float arg3,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Number>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Number doInBackground(Void... params) {
                return distFrom(arg0, arg1, arg2, arg3, headers);
            }
            @Override
            protected void onPostExecute(Number result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("distFrom", result);
                }
            }
        }.execute();
    }
    
    public float distFrom(float arg0,float arg1,float arg2,float arg3){
        return distFrom(arg0, arg1, arg2, arg3, null);
    }
    
    public float distFrom(float arg0,float arg1,float arg2,float arg3,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","distFrom");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapReq.addProperty("arg3",arg3);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/distFrom", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/distFrom", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        float resultVariable = Float.parseFloat(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Number){
                        float resultVariable = (Integer) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return -1.0f;
    }
    
    public void editPhotoProfileUserAsync(consumer arg0,String arg1) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        editPhotoProfileUserAsync(arg0, arg1, null);
    }
    
    public void editPhotoProfileUserAsync(final consumer arg0,final String arg1,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, consumer>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected consumer doInBackground(Void... params) {
                return editPhotoProfileUser(arg0, arg1, headers);
            }
            @Override
            protected void onPostExecute(consumer result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("editPhotoProfileUser", result);
                }
            }
        }.execute();
    }
    
    public consumer editPhotoProfileUser(consumer arg0,String arg1){
        return editPhotoProfileUser(arg0, arg1, null);
    }
    
    public consumer editPhotoProfileUser(consumer arg0,String arg1,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","editPhotoProfileUser");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new consumer().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/editPhotoProfileUser", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/editPhotoProfileUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    consumer resultVariable =  new consumer (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getListQuestionInputNumberAsync(questionInputNumber arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getListQuestionInputNumberAsync(arg0, null);
    }
    
    public void getListQuestionInputNumberAsync(final questionInputNumber arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getListQuestionInputNumber(arg0, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getListQuestionInputNumber", result);
                }
            }
        }.execute();
    }
    
    public void getListQuestionInputNumber(questionInputNumber arg0){
        getListQuestionInputNumber(arg0, null);
    }
    
    public void getListQuestionInputNumber(questionInputNumber arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getListQuestionInputNumber");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new questionInputNumber().getClass());
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListQuestionInputNumber", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListQuestionInputNumber", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void deleteReservationAsync(long arg0,long arg1,long arg2) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        deleteReservationAsync(arg0, arg1, arg2, null);
    }
    
    public void deleteReservationAsync(final long arg0,final long arg1,final long arg2,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                deleteReservation(arg0, arg1, arg2, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("deleteReservation", result);
                }
            }
        }.execute();
    }
    
    public void deleteReservation(long arg0,long arg1,long arg2){
        deleteReservation(arg0, arg1, arg2, null);
    }
    
    public void deleteReservation(long arg0,long arg1,long arg2,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","deleteReservation");
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/deleteReservation", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/deleteReservation", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void sendResponseQuestionInputNumberAsync(long arg0,long arg1,double arg2,boolean arg2Specified,long arg3,long arg4) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        sendResponseQuestionInputNumberAsync(arg0, arg1, arg2, arg2Specified, arg3, arg4, null);
    }
    
    public void sendResponseQuestionInputNumberAsync(final long arg0,final long arg1,final double arg2,final boolean arg2Specified,final long arg3,final long arg4,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                sendResponseQuestionInputNumber(arg0, arg1, arg2, arg2Specified, arg3, arg4, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("sendResponseQuestionInputNumber", result);
                }
            }
        }.execute();
    }
    
    public void sendResponseQuestionInputNumber(long arg0,long arg1,double arg2,boolean arg2Specified,long arg3,long arg4){
        sendResponseQuestionInputNumber(arg0, arg1, arg2, arg2Specified, arg3, arg4, null);
    }
    
    public void sendResponseQuestionInputNumber(long arg0,long arg1,double arg2,boolean arg2Specified,long arg3,long arg4,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","sendResponseQuestionInputNumber");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapReq.addProperty("arg2Specified",arg2Specified);
        soapReq.addProperty("arg3",arg3);
        soapReq.addProperty("arg4",arg4);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/sendResponseQuestionInputNumber", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/sendResponseQuestionInputNumber", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void sendResponseQuestionInputTextAsync(long arg0,long arg1,String arg2,long arg3,long arg4) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        sendResponseQuestionInputTextAsync(arg0, arg1, arg2, arg3, arg4, null);
    }
    
    public void sendResponseQuestionInputTextAsync(final long arg0,final long arg1,final String arg2,final long arg3,final long arg4,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                sendResponseQuestionInputText(arg0, arg1, arg2, arg3, arg4, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("sendResponseQuestionInputText", result);
                }
            }
        }.execute();
    }
    
    public void sendResponseQuestionInputText(long arg0,long arg1,String arg2,long arg3,long arg4){
        sendResponseQuestionInputText(arg0, arg1, arg2, arg3, arg4, null);
    }
    
    public void sendResponseQuestionInputText(long arg0,long arg1,String arg2,long arg3,long arg4,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","sendResponseQuestionInputText");
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapReq.addProperty("arg3",arg3);
        soapReq.addProperty("arg4",arg4);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/sendResponseQuestionInputText", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/sendResponseQuestionInputText", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getListChoiceQuestionAsync(choiceQuestion arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getListChoiceQuestionAsync(arg0, null);
    }
    
    public void getListChoiceQuestionAsync(final choiceQuestion arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getListChoiceQuestion(arg0, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getListChoiceQuestion", result);
                }
            }
        }.execute();
    }
    
    public void getListChoiceQuestion(choiceQuestion arg0){
        getListChoiceQuestion(arg0, null);
    }
    
    public void getListChoiceQuestion(choiceQuestion arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getListChoiceQuestion");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new choiceQuestion().getClass());
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListChoiceQuestion", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListChoiceQuestion", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void askPaiementAsync(consumer arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        askPaiementAsync(arg0, null);
    }
    
    public void askPaiementAsync(final consumer arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return askPaiement(arg0, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("askPaiement", result);
                }
            }
        }.execute();
    }
    
    public boolean askPaiement(consumer arg0){
        return askPaiement(arg0, null);
    }
    
    public boolean askPaiement(consumer arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","askPaiement");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new consumer().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/askPaiement", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/askPaiement", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getLastAnswerForMissionAndSignAsync(long arg0,long arg1,consumer arg2) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getLastAnswerForMissionAndSignAsync(arg0, arg1, arg2, null);
    }
    
    public void getLastAnswerForMissionAndSignAsync(final long arg0,final long arg1,final consumer arg2,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getLastAnswerForMissionAndSign(arg0, arg1, arg2, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getLastAnswerForMissionAndSign", result);
                }
            }
        }.execute();
    }
    
    public void getLastAnswerForMissionAndSign(long arg0,long arg1,consumer arg2){
        getLastAnswerForMissionAndSign(arg0, arg1, arg2, null);
    }
    
    public void getLastAnswerForMissionAndSign(long arg0,long arg1,consumer arg2,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getLastAnswerForMissionAndSign");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg2",new consumer().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getLastAnswerForMissionAndSign", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getLastAnswerForMissionAndSign", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void sendVerificationCodeAsync(String arg0,long arg1) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        sendVerificationCodeAsync(arg0, arg1, null);
    }
    
    public void sendVerificationCodeAsync(final String arg0,final long arg1,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                sendVerificationCode(arg0, arg1, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("sendVerificationCode", result);
                }
            }
        }.execute();
    }
    
    public void sendVerificationCode(String arg0,long arg1){
        sendVerificationCode(arg0, arg1, null);
    }
    
    public void sendVerificationCode(String arg0,long arg1,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","sendVerificationCode");
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/sendVerificationCode", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/sendVerificationCode", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getUserAccountByLoginByPasswordAsync(String arg0,String arg1) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getUserAccountByLoginByPasswordAsync(arg0, arg1, null);
    }
    
    public void getUserAccountByLoginByPasswordAsync(final String arg0,final String arg1,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, userAccount>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected userAccount doInBackground(Void... params) {
                return getUserAccountByLoginByPassword(arg0, arg1, headers);
            }
            @Override
            protected void onPostExecute(userAccount result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getUserAccountByLoginByPassword", result);
                }
            }
        }.execute();
    }
    
    public userAccount getUserAccountByLoginByPassword(String arg0,String arg1){
        return getUserAccountByLoginByPassword(arg0, arg1, null);
    }
    
    public userAccount getUserAccountByLoginByPassword(String arg0,String arg1,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = false;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getUserAccountByLoginByPassword");
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getUserAccountByLoginByPassword", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getUserAccountByLoginByPassword", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    userAccount resultVariable =  new userAccount (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updateLocalisationConsumerAsync(long arg0,double arg1,boolean arg1Specified,double arg2,boolean arg2Specified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateLocalisationConsumerAsync(arg0, arg1, arg1Specified, arg2, arg2Specified, null);
    }
    
    public void updateLocalisationConsumerAsync(final long arg0,final double arg1,final boolean arg1Specified,final double arg2,final boolean arg2Specified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                updateLocalisationConsumer(arg0, arg1, arg1Specified, arg2, arg2Specified, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateLocalisationConsumer", result);
                }
            }
        }.execute();
    }
    
    public void updateLocalisationConsumer(long arg0,double arg1,boolean arg1Specified,double arg2,boolean arg2Specified){
        updateLocalisationConsumer(arg0, arg1, arg1Specified, arg2, arg2Specified, null);
    }
    
    public void updateLocalisationConsumer(long arg0,double arg1,boolean arg1Specified,double arg2,boolean arg2Specified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","updateLocalisationConsumer");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg1Specified",arg1Specified);
        soapReq.addProperty("arg2",arg2);
        soapReq.addProperty("arg2Specified",arg2Specified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/updateLocalisationConsumer", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/updateLocalisationConsumer", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void editConsumerAsync(consumer arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        editConsumerAsync(arg0, null);
    }
    
    public void editConsumerAsync(final consumer arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, consumer>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected consumer doInBackground(Void... params) {
                return editConsumer(arg0, headers);
            }
            @Override
            protected void onPostExecute(consumer result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("editConsumer", result);
                }
            }
        }.execute();
    }
    
    public consumer editConsumer(consumer arg0){
        return editConsumer(arg0, null);
    }
    
    public consumer editConsumer(consumer arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","editConsumer");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new consumer().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/editConsumer", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/editConsumer", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    consumer resultVariable =  new consumer (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addPushIdentifierAsync(pushIdentifier arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addPushIdentifierAsync(arg0, null);
    }
    
    public void addPushIdentifierAsync(final pushIdentifier arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                addPushIdentifier(arg0, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addPushIdentifier", result);
                }
            }
        }.execute();
    }
    
    public void addPushIdentifier(pushIdentifier arg0){
        addPushIdentifier(arg0, null);
    }
    
    public void addPushIdentifier(pushIdentifier arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","addPushIdentifier");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new pushIdentifier().getClass());
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/addPushIdentifier", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/addPushIdentifier", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getRandomStringAsync(int arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getRandomStringAsync(arg0, null);
    }
    
    public void getRandomStringAsync(final int arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, String>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected String doInBackground(Void... params) {
                return getRandomString(arg0, headers);
            }
            @Override
            protected void onPostExecute(String result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getRandomString", result);
                }
            }
        }.execute();
    }
    
    public String getRandomString(int arg0){
        return getRandomString(arg0, null);
    }
    
    public String getRandomString(int arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getRandomString");
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getRandomString", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getRandomString", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    }else if (obj!= null && obj instanceof String){
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
    
    public void uploadImagesAsync(String arg0,long arg1,long arg2,long arg3) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        uploadImagesAsync(arg0, arg1, arg2, arg3, null);
    }
    
    public void uploadImagesAsync(final String arg0,final long arg1,final long arg2,final long arg3,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                uploadImages(arg0, arg1, arg2, arg3, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("uploadImages", result);
                }
            }
        }.execute();
    }
    
    public void uploadImages(String arg0,long arg1,long arg2,long arg3){
        uploadImages(arg0, arg1, arg2, arg3, null);
    }
    
    public void uploadImages(String arg0,long arg1,long arg2,long arg3,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","uploadImages");
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapReq.addProperty("arg3",arg3);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/uploadImages", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/uploadImages", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getListReponseQuestionInputTextAsync(responseQuestionInputText arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getListReponseQuestionInputTextAsync(arg0, null);
    }
    
    public void getListReponseQuestionInputTextAsync(final responseQuestionInputText arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getListReponseQuestionInputText(arg0, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getListReponseQuestionInputText", result);
                }
            }
        }.execute();
    }
    
    public void getListReponseQuestionInputText(responseQuestionInputText arg0){
        getListReponseQuestionInputText(arg0, null);
    }
    
    public void getListReponseQuestionInputText(responseQuestionInputText arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getListReponseQuestionInputText");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new responseQuestionInputText().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListReponseQuestionInputText", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListReponseQuestionInputText", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void sendResponseQuestionUniqueChoiceAsync(long arg0,long arg1,long arg2,long arg3,long arg4) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        sendResponseQuestionUniqueChoiceAsync(arg0, arg1, arg2, arg3, arg4, null);
    }
    
    public void sendResponseQuestionUniqueChoiceAsync(final long arg0,final long arg1,final long arg2,final long arg3,final long arg4,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                sendResponseQuestionUniqueChoice(arg0, arg1, arg2, arg3, arg4, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("sendResponseQuestionUniqueChoice", result);
                }
            }
        }.execute();
    }
    
    public void sendResponseQuestionUniqueChoice(long arg0,long arg1,long arg2,long arg3,long arg4){
        sendResponseQuestionUniqueChoice(arg0, arg1, arg2, arg3, arg4, null);
    }
    
    public void sendResponseQuestionUniqueChoice(long arg0,long arg1,long arg2,long arg3,long arg4,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","sendResponseQuestionUniqueChoice");
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapReq.addProperty("arg3",arg3);
        soapReq.addProperty("arg4",arg4);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/sendResponseQuestionUniqueChoice", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/sendResponseQuestionUniqueChoice", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void paiementPossibleAsync(long arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        paiementPossibleAsync(arg0, null);
    }
    
    public void paiementPossibleAsync(final long arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return paiementPossible(arg0, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("paiementPossible", result);
                }
            }
        }.execute();
    }
    
    public boolean paiementPossible(long arg0){
        return paiementPossible(arg0, null);
    }
    
    public boolean paiementPossible(long arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","paiementPossible");
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/paiementPossible", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/paiementPossible", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void addPushIdentifierToUserAccountAsync(long arg0,pushIdentifier arg1) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addPushIdentifierToUserAccountAsync(arg0, arg1, null);
    }
    
    public void addPushIdentifierToUserAccountAsync(final long arg0,final pushIdentifier arg1,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                addPushIdentifierToUserAccount(arg0, arg1, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addPushIdentifierToUserAccount", result);
                }
            }
        }.execute();
    }
    
    public void addPushIdentifierToUserAccount(long arg0,pushIdentifier arg1){
        addPushIdentifierToUserAccount(arg0, arg1, null);
    }
    
    public void addPushIdentifierToUserAccount(long arg0,pushIdentifier arg1,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","addPushIdentifierToUserAccount");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg1",new pushIdentifier().getClass());
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/addPushIdentifierToUserAccount", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/addPushIdentifierToUserAccount", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getListQuestionUniqueChoiceAsync(questionUniqueChoice arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getListQuestionUniqueChoiceAsync(arg0, null);
    }
    
    public void getListQuestionUniqueChoiceAsync(final questionUniqueChoice arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getListQuestionUniqueChoice(arg0, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getListQuestionUniqueChoice", result);
                }
            }
        }.execute();
    }
    
    public void getListQuestionUniqueChoice(questionUniqueChoice arg0){
        getListQuestionUniqueChoice(arg0, null);
    }
    
    public void getListQuestionUniqueChoice(questionUniqueChoice arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getListQuestionUniqueChoice");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new questionUniqueChoice().getClass());
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListQuestionUniqueChoice", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListQuestionUniqueChoice", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void addResponseQuestionMultipleChoiceAsync(long arg0,consumer arg1,responseQuestionMultipleChoice arg2,long arg3,sign arg4) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addResponseQuestionMultipleChoiceAsync(arg0, arg1, arg2, arg3, arg4, null);
    }
    
    public void addResponseQuestionMultipleChoiceAsync(final long arg0,final consumer arg1,final responseQuestionMultipleChoice arg2,final long arg3,final sign arg4,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, responseQuestionMultipleChoice>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected responseQuestionMultipleChoice doInBackground(Void... params) {
                return addResponseQuestionMultipleChoice(arg0, arg1, arg2, arg3, arg4, headers);
            }
            @Override
            protected void onPostExecute(responseQuestionMultipleChoice result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addResponseQuestionMultipleChoice", result);
                }
            }
        }.execute();
    }
    
    public responseQuestionMultipleChoice addResponseQuestionMultipleChoice(long arg0,consumer arg1,responseQuestionMultipleChoice arg2,long arg3,sign arg4){
        return addResponseQuestionMultipleChoice(arg0, arg1, arg2, arg3, arg4, null);
    }
    
    public responseQuestionMultipleChoice addResponseQuestionMultipleChoice(long arg0,consumer arg1,responseQuestionMultipleChoice arg2,long arg3,sign arg4,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","addResponseQuestionMultipleChoice");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg1",new consumer().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg2",new responseQuestionMultipleChoice().getClass());
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg4",new sign().getClass());
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapReq.addProperty("arg3",arg3);
        soapReq.addProperty("arg4",arg4);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/addResponseQuestionMultipleChoice", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/addResponseQuestionMultipleChoice", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    responseQuestionMultipleChoice resultVariable =  new responseQuestionMultipleChoice (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getListMissionByConsumerAsync(consumer arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getListMissionByConsumerAsync(arg0, null);
    }
    
    public void getListMissionByConsumerAsync(final consumer arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectormission>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectormission doInBackground(Void... params) {
                return getListMissionByConsumer(arg0, headers);
            }
            @Override
            protected void onPostExecute(Vectormission result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getListMissionByConsumer", result);
                }
            }
        }.execute();
    }
    
    public Vectormission getListMissionByConsumer(consumer arg0){
        return getListMissionByConsumer(arg0, null);
    }
    
    public Vectormission getListMissionByConsumer(consumer arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getListMissionByConsumer");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new consumer().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListMissionByConsumer", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListMissionByConsumer", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectormission resultVariable = new Vectormission(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getListReponseQuestionInputNumberAsync(responseQuestionInputNumber arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getListReponseQuestionInputNumberAsync(arg0, null);
    }
    
    public void getListReponseQuestionInputNumberAsync(final responseQuestionInputNumber arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getListReponseQuestionInputNumber(arg0, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getListReponseQuestionInputNumber", result);
                }
            }
        }.execute();
    }
    
    public void getListReponseQuestionInputNumber(responseQuestionInputNumber arg0){
        getListReponseQuestionInputNumber(arg0, null);
    }
    
    public void getListReponseQuestionInputNumber(responseQuestionInputNumber arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getListReponseQuestionInputNumber");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new responseQuestionInputNumber().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListReponseQuestionInputNumber", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListReponseQuestionInputNumber", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getListMissionsByIdConsumerAsync(long arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getListMissionsByIdConsumerAsync(arg0, null);
    }
    
    public void getListMissionsByIdConsumerAsync(final long arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectormission>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectormission doInBackground(Void... params) {
                return getListMissionsByIdConsumer(arg0, headers);
            }
            @Override
            protected void onPostExecute(Vectormission result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getListMissionsByIdConsumer", result);
                }
            }
        }.execute();
    }
    
    public Vectormission getListMissionsByIdConsumer(long arg0){
        return getListMissionsByIdConsumer(arg0, null);
    }
    
    public Vectormission getListMissionsByIdConsumer(long arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getListMissionsByIdConsumer");
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListMissionsByIdConsumer", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListMissionsByIdConsumer", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectormission resultVariable = new Vectormission(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getListMissionByDistanceAsync(double arg0,boolean arg0Specified,double arg1,boolean arg1Specified,int arg2,boolean arg2Specified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getListMissionByDistanceAsync(arg0, arg0Specified, arg1, arg1Specified, arg2, arg2Specified, null);
    }
    
    public void getListMissionByDistanceAsync(final double arg0,final boolean arg0Specified,final double arg1,final boolean arg1Specified,final int arg2,final boolean arg2Specified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectormission>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectormission doInBackground(Void... params) {
                return getListMissionByDistance(arg0, arg0Specified, arg1, arg1Specified, arg2, arg2Specified, headers);
            }
            @Override
            protected void onPostExecute(Vectormission result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getListMissionByDistance", result);
                }
            }
        }.execute();
    }
    
    public Vectormission getListMissionByDistance(double arg0,boolean arg0Specified,double arg1,boolean arg1Specified,int arg2,boolean arg2Specified){
        return getListMissionByDistance(arg0, arg0Specified, arg1, arg1Specified, arg2, arg2Specified, null);
    }
    
    public Vectormission getListMissionByDistance(double arg0,boolean arg0Specified,double arg1,boolean arg1Specified,int arg2,boolean arg2Specified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = false;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getListMissionByDistance");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg0Specified",arg0Specified);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg1Specified",arg1Specified);
        soapReq.addProperty("arg2",arg2);
        soapReq.addProperty("arg2Specified",arg2Specified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListMissionByDistance", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListMissionByDistance", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectormission resultVariable = new Vectormission(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getPageElementTextAsync(pageElementText arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getPageElementTextAsync(arg0, null);
    }
    
    public void getPageElementTextAsync(final pageElementText arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getPageElementText(arg0, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getPageElementText", result);
                }
            }
        }.execute();
    }
    
    public void getPageElementText(pageElementText arg0){
        getPageElementText(arg0, null);
    }
    
    public void getPageElementText(pageElementText arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getPageElementText");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new pageElementText().getClass());
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getPageElementText", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getPageElementText", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getListMissionAsync(String arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getListMissionAsync(arg0, null);
    }
    
    public void getListMissionAsync(final String arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectormission>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectormission doInBackground(Void... params) {
                return getListMission(arg0, headers);
            }
            @Override
            protected void onPostExecute(Vectormission result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getListMission", result);
                }
            }
        }.execute();
    }
    
    public Vectormission getListMission(String arg0){
        return getListMission(arg0, null);
    }
    
    public Vectormission getListMission(String arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getListMission");
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListMission", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListMission", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectormission resultVariable = new Vectormission(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void missionAvailableAsync(long arg0,long arg1) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        missionAvailableAsync(arg0, arg1, null);
    }
    
    public void missionAvailableAsync(final long arg0,final long arg1,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return missionAvailable(arg0, arg1, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("missionAvailable", result);
                }
            }
        }.execute();
    }
    
    public boolean missionAvailable(long arg0,long arg1){
        return missionAvailable(arg0, arg1, null);
    }
    
    public boolean missionAvailable(long arg0,long arg1,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","missionAvailable");
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/missionAvailable", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/missionAvailable", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getUserFacebookByLoginAsync(String arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getUserFacebookByLoginAsync(arg0, null);
    }
    
    public void getUserFacebookByLoginAsync(final String arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, userAccount>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected userAccount doInBackground(Void... params) {
                return getUserFacebookByLogin(arg0, headers);
            }
            @Override
            protected void onPostExecute(userAccount result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getUserFacebookByLogin", result);
                }
            }
        }.execute();
    }
    
    public userAccount getUserFacebookByLogin(String arg0){
        return getUserFacebookByLogin(arg0, null);
    }
    
    public userAccount getUserFacebookByLogin(String arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = false;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getUserFacebookByLogin");
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getUserFacebookByLogin", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getUserFacebookByLogin", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    userAccount resultVariable =  new userAccount (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void createConsumerAccountAsync(String arg0,String arg1) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        createConsumerAccountAsync(arg0, arg1, null);
    }
    
    public void createConsumerAccountAsync(final String arg0,final String arg1,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, userAccount>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected userAccount doInBackground(Void... params) {
                return createConsumerAccount(arg0, arg1, headers);
            }
            @Override
            protected void onPostExecute(userAccount result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("createConsumerAccount", result);
                }
            }
        }.execute();
    }
    
    public userAccount createConsumerAccount(String arg0,String arg1){
        return createConsumerAccount(arg0, arg1, null);
    }
    
    public userAccount createConsumerAccount(String arg0,String arg1,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","createConsumerAccount");
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/createConsumerAccount", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/createConsumerAccount", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    userAccount resultVariable =  new userAccount (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getListReponseQuestionUniqueChoiceAsync(responseQuestionUniqueChoice arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getListReponseQuestionUniqueChoiceAsync(arg0, null);
    }
    
    public void getListReponseQuestionUniqueChoiceAsync(final responseQuestionUniqueChoice arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getListReponseQuestionUniqueChoice(arg0, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getListReponseQuestionUniqueChoice", result);
                }
            }
        }.execute();
    }
    
    public void getListReponseQuestionUniqueChoice(responseQuestionUniqueChoice arg0){
        getListReponseQuestionUniqueChoice(arg0, null);
    }
    
    public void getListReponseQuestionUniqueChoice(responseQuestionUniqueChoice arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getListReponseQuestionUniqueChoice");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new responseQuestionUniqueChoice().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListReponseQuestionUniqueChoice", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListReponseQuestionUniqueChoice", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void missionAvailableForConsumerAsync(long arg0,long arg1,long arg2) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        missionAvailableForConsumerAsync(arg0, arg1, arg2, null);
    }
    
    public void missionAvailableForConsumerAsync(final long arg0,final long arg1,final long arg2,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return missionAvailableForConsumer(arg0, arg1, arg2, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("missionAvailableForConsumer", result);
                }
            }
        }.execute();
    }
    
    public boolean missionAvailableForConsumer(long arg0,long arg1,long arg2){
        return missionAvailableForConsumer(arg0, arg1, arg2, null);
    }
    
    public boolean missionAvailableForConsumer(long arg0,long arg1,long arg2,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","missionAvailableForConsumer");
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/missionAvailableForConsumer", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/missionAvailableForConsumer", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void requestPaiementAsync(consumer arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        requestPaiementAsync(arg0, null);
    }
    
    public void requestPaiementAsync(final consumer arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                requestPaiement(arg0, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("requestPaiement", result);
                }
            }
        }.execute();
    }
    
    public void requestPaiement(consumer arg0){
        requestPaiement(arg0, null);
    }
    
    public void requestPaiement(consumer arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","requestPaiement");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new consumer().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/requestPaiement", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/requestPaiement", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getListQuestionInputTextAsync(questionInputText arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getListQuestionInputTextAsync(arg0, null);
    }
    
    public void getListQuestionInputTextAsync(final questionInputText arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getListQuestionInputText(arg0, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getListQuestionInputText", result);
                }
            }
        }.execute();
    }
    
    public void getListQuestionInputText(questionInputText arg0){
        getListQuestionInputText(arg0, null);
    }
    
    public void getListQuestionInputText(questionInputText arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getListQuestionInputText");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new questionInputText().getClass());
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListQuestionInputText", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListQuestionInputText", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getListQuestionMultipleChoiceAsync(questionMultipleChoice arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getListQuestionMultipleChoiceAsync(arg0, null);
    }
    
    public void getListQuestionMultipleChoiceAsync(final questionMultipleChoice arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getListQuestionMultipleChoice(arg0, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getListQuestionMultipleChoice", result);
                }
            }
        }.execute();
    }
    
    public void getListQuestionMultipleChoice(questionMultipleChoice arg0){
        getListQuestionMultipleChoice(arg0, null);
    }
    
    public void getListQuestionMultipleChoice(questionMultipleChoice arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getListQuestionMultipleChoice");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new questionMultipleChoice().getClass());
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListQuestionMultipleChoice", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListQuestionMultipleChoice", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getListMissionByConsumerByDistanceAsync(consumer arg0,double arg1,boolean arg1Specified,double arg2,boolean arg2Specified,int arg3,boolean arg3Specified) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getListMissionByConsumerByDistanceAsync(arg0, arg1, arg1Specified, arg2, arg2Specified, arg3, arg3Specified, null);
    }
    
    public void getListMissionByConsumerByDistanceAsync(final consumer arg0,final double arg1,final boolean arg1Specified,final double arg2,final boolean arg2Specified,final int arg3,final boolean arg3Specified,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectormission>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectormission doInBackground(Void... params) {
                return getListMissionByConsumerByDistance(arg0, arg1, arg1Specified, arg2, arg2Specified, arg3, arg3Specified, headers);
            }
            @Override
            protected void onPostExecute(Vectormission result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getListMissionByConsumerByDistance", result);
                }
            }
        }.execute();
    }
    
    public Vectormission getListMissionByConsumerByDistance(consumer arg0,double arg1,boolean arg1Specified,double arg2,boolean arg2Specified,int arg3,boolean arg3Specified){
        return getListMissionByConsumerByDistance(arg0, arg1, arg1Specified, arg2, arg2Specified, arg3, arg3Specified, null);
    }
    
    public Vectormission getListMissionByConsumerByDistance(consumer arg0,double arg1,boolean arg1Specified,double arg2,boolean arg2Specified,int arg3,boolean arg3Specified,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getListMissionByConsumerByDistance");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new consumer().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg1Specified",arg1Specified);
        soapReq.addProperty("arg2",arg2);
        soapReq.addProperty("arg2Specified",arg2Specified);
        soapReq.addProperty("arg3",arg3);
        soapReq.addProperty("arg3Specified",arg3Specified);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListMissionByConsumerByDistance", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListMissionByConsumerByDistance", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectormission resultVariable = new Vectormission(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void editUserAccountAsync(userAccount arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        editUserAccountAsync(arg0, null);
    }
    
    public void editUserAccountAsync(final userAccount arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, userAccount>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected userAccount doInBackground(Void... params) {
                return editUserAccount(arg0, headers);
            }
            @Override
            protected void onPostExecute(userAccount result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("editUserAccount", result);
                }
            }
        }.execute();
    }
    
    public userAccount editUserAccount(userAccount arg0){
        return editUserAccount(arg0, null);
    }
    
    public userAccount editUserAccount(userAccount arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","editUserAccount");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new userAccount().getClass());
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/editUserAccount", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/editUserAccount", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    userAccount resultVariable =  new userAccount (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void askVirementAsync(long arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        askVirementAsync(arg0, null);
    }
    
    public void askVirementAsync(final long arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return askVirement(arg0, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("askVirement", result);
                }
            }
        }.execute();
    }
    
    public boolean askVirement(long arg0){
        return askVirement(arg0, null);
    }
    
    public boolean askVirement(long arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","askVirement");
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/askVirement", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/askVirement", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void addResponseQuestionInputNumberAsync(long arg0,consumer arg1,responseQuestionInputNumber arg2,long arg3,sign arg4) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addResponseQuestionInputNumberAsync(arg0, arg1, arg2, arg3, arg4, null);
    }
    
    public void addResponseQuestionInputNumberAsync(final long arg0,final consumer arg1,final responseQuestionInputNumber arg2,final long arg3,final sign arg4,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, responseQuestionInputNumber>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected responseQuestionInputNumber doInBackground(Void... params) {
                return addResponseQuestionInputNumber(arg0, arg1, arg2, arg3, arg4, headers);
            }
            @Override
            protected void onPostExecute(responseQuestionInputNumber result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addResponseQuestionInputNumber", result);
                }
            }
        }.execute();
    }
    
    public responseQuestionInputNumber addResponseQuestionInputNumber(long arg0,consumer arg1,responseQuestionInputNumber arg2,long arg3,sign arg4){
        return addResponseQuestionInputNumber(arg0, arg1, arg2, arg3, arg4, null);
    }
    
    public responseQuestionInputNumber addResponseQuestionInputNumber(long arg0,consumer arg1,responseQuestionInputNumber arg2,long arg3,sign arg4,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","addResponseQuestionInputNumber");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg1",new consumer().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg2",new responseQuestionInputNumber().getClass());
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg4",new sign().getClass());
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapReq.addProperty("arg3",arg3);
        soapReq.addProperty("arg4",arg4);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/addResponseQuestionInputNumber", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/addResponseQuestionInputNumber", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    responseQuestionInputNumber resultVariable =  new responseQuestionInputNumber (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void requestPaiementReturnAsync(consumer arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        requestPaiementReturnAsync(arg0, null);
    }
    
    public void requestPaiementReturnAsync(final consumer arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return requestPaiementReturn(arg0, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("requestPaiementReturn", result);
                }
            }
        }.execute();
    }
    
    public boolean requestPaiementReturn(consumer arg0){
        return requestPaiementReturn(arg0, null);
    }
    
    public boolean requestPaiementReturn(consumer arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","requestPaiementReturn");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new consumer().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/requestPaiementReturn", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/requestPaiementReturn", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void sendResponseQuestionMultipleChoiceAsync(long arg0,long arg1,String arg2,long arg3,long arg4) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        sendResponseQuestionMultipleChoiceAsync(arg0, arg1, arg2, arg3, arg4, null);
    }
    
    public void sendResponseQuestionMultipleChoiceAsync(final long arg0,final long arg1,final String arg2,final long arg3,final long arg4,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                sendResponseQuestionMultipleChoice(arg0, arg1, arg2, arg3, arg4, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("sendResponseQuestionMultipleChoice", result);
                }
            }
        }.execute();
    }
    
    public void sendResponseQuestionMultipleChoice(long arg0,long arg1,String arg2,long arg3,long arg4){
        sendResponseQuestionMultipleChoice(arg0, arg1, arg2, arg3, arg4, null);
    }
    
    public void sendResponseQuestionMultipleChoice(long arg0,long arg1,String arg2,long arg3,long arg4,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","sendResponseQuestionMultipleChoice");
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapReq.addProperty("arg3",arg3);
        soapReq.addProperty("arg4",arg4);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/sendResponseQuestionMultipleChoice", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/sendResponseQuestionMultipleChoice", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void uploadListImageAsync(String arg0,long arg1,consumer arg2,sign arg3) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        uploadListImageAsync(arg0, arg1, arg2, arg3, null);
    }
    
    public void uploadListImageAsync(final String arg0,final long arg1,final consumer arg2,final sign arg3,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return uploadListImage(arg0, arg1, arg2, arg3, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("uploadListImage", result);
                }
            }
        }.execute();
    }
    
    public boolean uploadListImage(String arg0,long arg1,consumer arg2,sign arg3){
        return uploadListImage(arg0, arg1, arg2, arg3, null);
    }
    
    public boolean uploadListImage(String arg0,long arg1,consumer arg2,sign arg3,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","uploadListImage");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg2",new consumer().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg3",new sign().getClass());
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapReq.addProperty("arg3",arg3);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/uploadListImage", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/uploadListImage", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void emailAvailableAsync(String arg0,boolean arg1,long arg2) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        emailAvailableAsync(arg0, arg1, arg2, null);
    }
    
    public void emailAvailableAsync(final String arg0,final boolean arg1,final long arg2,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return emailAvailable(arg0, arg1, arg2, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("emailAvailable", result);
                }
            }
        }.execute();
    }
    
    public boolean emailAvailable(String arg0,boolean arg1,long arg2){
        return emailAvailable(arg0, arg1, arg2, null);
    }
    
    public boolean emailAvailable(String arg0,boolean arg1,long arg2,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","emailAvailable");
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/emailAvailable", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/emailAvailable", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getListResponseQuestionAsync(responseQuestion arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getListResponseQuestionAsync(arg0, null);
    }
    
    public void getListResponseQuestionAsync(final responseQuestion arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getListResponseQuestion(arg0, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getListResponseQuestion", result);
                }
            }
        }.execute();
    }
    
    public void getListResponseQuestion(responseQuestion arg0){
        getListResponseQuestion(arg0, null);
    }
    
    public void getListResponseQuestion(responseQuestion arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getListResponseQuestion");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new responseQuestion().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListResponseQuestion", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListResponseQuestion", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void getUserAccountByLoginAsync(String arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getUserAccountByLoginAsync(arg0, null);
    }
    
    public void getUserAccountByLoginAsync(final String arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, userAccount>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected userAccount doInBackground(Void... params) {
                return getUserAccountByLogin(arg0, headers);
            }
            @Override
            protected void onPostExecute(userAccount result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getUserAccountByLogin", result);
                }
            }
        }.execute();
    }
    
    public userAccount getUserAccountByLogin(String arg0){
        return getUserAccountByLogin(arg0, null);
    }
    
    public userAccount getUserAccountByLogin(String arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = false;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getUserAccountByLogin");
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getUserAccountByLogin", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getUserAccountByLogin", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    userAccount resultVariable =  new userAccount (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addResponseQuestionUniqueChoiceAsync(long arg0,consumer arg1,responseQuestionUniqueChoice arg2,long arg3,sign arg4) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addResponseQuestionUniqueChoiceAsync(arg0, arg1, arg2, arg3, arg4, null);
    }
    
    public void addResponseQuestionUniqueChoiceAsync(final long arg0,final consumer arg1,final responseQuestionUniqueChoice arg2,final long arg3,final sign arg4,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, responseQuestionUniqueChoice>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected responseQuestionUniqueChoice doInBackground(Void... params) {
                return addResponseQuestionUniqueChoice(arg0, arg1, arg2, arg3, arg4, headers);
            }
            @Override
            protected void onPostExecute(responseQuestionUniqueChoice result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addResponseQuestionUniqueChoice", result);
                }
            }
        }.execute();
    }
    
    public responseQuestionUniqueChoice addResponseQuestionUniqueChoice(long arg0,consumer arg1,responseQuestionUniqueChoice arg2,long arg3,sign arg4){
        return addResponseQuestionUniqueChoice(arg0, arg1, arg2, arg3, arg4, null);
    }
    
    public responseQuestionUniqueChoice addResponseQuestionUniqueChoice(long arg0,consumer arg1,responseQuestionUniqueChoice arg2,long arg3,sign arg4,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","addResponseQuestionUniqueChoice");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg1",new consumer().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg2",new responseQuestionUniqueChoice().getClass());
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg4",new sign().getClass());
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapReq.addProperty("arg3",arg3);
        soapReq.addProperty("arg4",arg4);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/addResponseQuestionUniqueChoice", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/addResponseQuestionUniqueChoice", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    responseQuestionUniqueChoice resultVariable =  new responseQuestionUniqueChoice (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getPageElementMediaAsync(pageElementMedia arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getPageElementMediaAsync(arg0, null);
    }
    
    public void getPageElementMediaAsync(final pageElementMedia arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Void>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Void doInBackground(Void... params) {
                getPageElementMedia(arg0, headers);
                return null;
            }
            @Override
            protected void onPostExecute(Void result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getPageElementMedia", result);
                }
            }
        }.execute();
    }
    
    public void getPageElementMedia(pageElementMedia arg0){
        getPageElementMedia(arg0, null);
    }
    
    public void getPageElementMedia(pageElementMedia arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getPageElementMedia");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg0",new pageElementMedia().getClass());
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getPageElementMedia", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getPageElementMedia", soapEnvelope);
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
    }
    
    public void reinitializationPasswordWithEmailAsync(String arg0) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        reinitializationPasswordWithEmailAsync(arg0, null);
    }
    
    public void reinitializationPasswordWithEmailAsync(final String arg0,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Boolean>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Boolean doInBackground(Void... params) {
                return reinitializationPasswordWithEmail(arg0, headers);
            }
            @Override
            protected void onPostExecute(Boolean result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("reinitializationPasswordWithEmail", result);
                }
            }
        }.execute();
    }
    
    public boolean reinitializationPasswordWithEmail(String arg0){
        return reinitializationPasswordWithEmail(arg0, null);
    }
    
    public boolean reinitializationPasswordWithEmail(String arg0,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","reinitializationPasswordWithEmail");
        soapReq.addProperty("arg0",arg0);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/reinitializationPasswordWithEmail", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/reinitializationPasswordWithEmail", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                        SoapPrimitive j =(SoapPrimitive) obj;
                        boolean resultVariable = Boolean.parseBoolean(j.toString());
                        return resultVariable;
                    }else if (obj!= null && obj instanceof Boolean){
                        boolean resultVariable = (Boolean) obj;
                        return resultVariable;
                    }
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return false;
    }
    
    public void getListMissionByDistanceByConsumerAsync(double arg0,boolean arg0Specified,double arg1,boolean arg1Specified,int arg2,boolean arg2Specified,long arg3) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getListMissionByDistanceByConsumerAsync(arg0, arg0Specified, arg1, arg1Specified, arg2, arg2Specified, arg3, null);
    }
    
    public void getListMissionByDistanceByConsumerAsync(final double arg0,final boolean arg0Specified,final double arg1,final boolean arg1Specified,final int arg2,final boolean arg2Specified,final long arg3,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, Vectormission>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected Vectormission doInBackground(Void... params) {
                return getListMissionByDistanceByConsumer(arg0, arg0Specified, arg1, arg1Specified, arg2, arg2Specified, arg3, headers);
            }
            @Override
            protected void onPostExecute(Vectormission result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getListMissionByDistanceByConsumer", result);
                }
            }
        }.execute();
    }
    
    public Vectormission getListMissionByDistanceByConsumer(double arg0,boolean arg0Specified,double arg1,boolean arg1Specified,int arg2,boolean arg2Specified,long arg3){
        return getListMissionByDistanceByConsumer(arg0, arg0Specified, arg1, arg1Specified, arg2, arg2Specified, arg3, null);
    }
    
    public Vectormission getListMissionByDistanceByConsumer(double arg0,boolean arg0Specified,double arg1,boolean arg1Specified,int arg2,boolean arg2Specified,long arg3,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","getListMissionByDistanceByConsumer");
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg0Specified",arg0Specified);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg1Specified",arg1Specified);
        soapReq.addProperty("arg2",arg2);
        soapReq.addProperty("arg2Specified",arg2Specified);
        soapReq.addProperty("arg3",arg3);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListMissionByDistanceByConsumer", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/getListMissionByDistanceByConsumer", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    Vectormission resultVariable = new Vectormission(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addResponseQuestionInputTextAsync(long arg0,consumer arg1,responseQuestionInputText arg2,long arg3,sign arg4) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addResponseQuestionInputTextAsync(arg0, arg1, arg2, arg3, arg4, null);
    }
    
    public void addResponseQuestionInputTextAsync(final long arg0,final consumer arg1,final responseQuestionInputText arg2,final long arg3,final sign arg4,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, responseQuestionInputText>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected responseQuestionInputText doInBackground(Void... params) {
                return addResponseQuestionInputText(arg0, arg1, arg2, arg3, arg4, headers);
            }
            @Override
            protected void onPostExecute(responseQuestionInputText result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addResponseQuestionInputText", result);
                }
            }
        }.execute();
    }
    
    public responseQuestionInputText addResponseQuestionInputText(long arg0,consumer arg1,responseQuestionInputText arg2,long arg3,sign arg4){
        return addResponseQuestionInputText(arg0, arg1, arg2, arg3, arg4, null);
    }
    
    public responseQuestionInputText addResponseQuestionInputText(long arg0,consumer arg1,responseQuestionInputText arg2,long arg3,sign arg4,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://sessions.ejb.tcheckit.fortutech.com/","addResponseQuestionInputText");
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg1",new consumer().getClass());
        MarshalFloat marshalFloat = new MarshalFloat();
        marshalFloat.register(soapEnvelope);
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg2",new responseQuestionInputText().getClass());
        soapEnvelope.addMapping("http://sessions.ejb.tcheckit.fortutech.com/","arg4",new sign().getClass());
        soapReq.addProperty("arg0",arg0);
        soapReq.addProperty("arg1",arg1);
        soapReq.addProperty("arg2",arg2);
        soapReq.addProperty("arg3",arg3);
        soapReq.addProperty("arg4",arg4);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/addResponseQuestionInputText", soapEnvelope,headers);
            }else{
                httpTransport.call("http://sessions.ejb.tcheckit.fortutech.com/addResponseQuestionInputText", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    responseQuestionInputText resultVariable =  new responseQuestionInputText (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
}
