package com.tcheckit.wsdl;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 2/21/2014 7:29:15 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import java.util.Hashtable;

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import com.tcheckit.wsdl.WS_Enums.civility;
import com.tcheckit.wsdl.WS_Enums.familyStatus;
import com.tcheckit.wsdl.WS_Enums.flag;
import com.tcheckit.wsdl.WS_Enums.typePhone;

public class consumer implements KvmSerializable {
    
    public String accountNumber;
    public double balancecash;
    public boolean balancecashSpecified;
    public int bankCode;
    public boolean bankCodeSpecified;
    public String bicId;
    public int guichetCode;
    public boolean guichetCodeSpecified;
    public String ibanId;
    public int numberMissions;
    public boolean numberMissionsSpecified;
    public media onePhoto;
    public String onePseudo;
    public typePhone oneTypePhone;
    public boolean oneTypePhoneSpecified;
    public String oneUUID;
    public String paypalMail;
    public int points;
    public boolean pointsSpecified;
    public int ribKey;
    public boolean ribKeySpecified;
    public double totalcash;
    public boolean totalcashSpecified;
    public double waitcash;
    public boolean waitcashSpecified;
    public int waitpoints;
    public boolean waitpointsSpecified;
    public String birthday;
    public boolean birthdaySpecified;
    public String birthplace;
    public civility civility;
    public boolean civilitySpecified;
    public String email;
    public familyStatus familyStatus;
    public boolean familyStatusSpecified;
    public String firstName;
    public String homePhone;
    public long id;
    public boolean idSpecified;
    public String mobilePhone;
    public String name;
    public String nationality;
    public address oneAddress;
    public String dateCreated;
    public boolean dateCreatedSpecified;
    public String dateDeleted;
    public boolean dateDeletedSpecified;
    public String dateUpdated;
    public boolean dateUpdatedSpecified;
    public flag oneFlag;
    public boolean oneFlagSpecified;
    
    public consumer(){}
    
    public consumer(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("accountNumber"))
        {
            Object obj = soapObject.getProperty("accountNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                accountNumber = j.toString();
            }else if (obj!= null && obj instanceof String){
                accountNumber = (String) obj;
            }
        }
        if (soapObject.hasProperty("balancecash"))
        {
            Object obj = soapObject.getProperty("balancecash");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                balancecash = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                balancecash = (Double) obj;
            }
        }
        if (soapObject.hasProperty("balancecashSpecified"))
        {
            Object obj = soapObject.getProperty("balancecashSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                balancecashSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                balancecashSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("bankCode"))
        {
            Object obj = soapObject.getProperty("bankCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                bankCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                bankCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("bankCodeSpecified"))
        {
            Object obj = soapObject.getProperty("bankCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                bankCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                bankCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("bicId"))
        {
            Object obj = soapObject.getProperty("bicId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                bicId = j.toString();
            }else if (obj!= null && obj instanceof String){
                bicId = (String) obj;
            }
        }
        if (soapObject.hasProperty("guichetCode"))
        {
            Object obj = soapObject.getProperty("guichetCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                guichetCode = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                guichetCode = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("guichetCodeSpecified"))
        {
            Object obj = soapObject.getProperty("guichetCodeSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                guichetCodeSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                guichetCodeSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("ibanId"))
        {
            Object obj = soapObject.getProperty("ibanId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                ibanId = j.toString();
            }else if (obj!= null && obj instanceof String){
                ibanId = (String) obj;
            }
        }
        if (soapObject.hasProperty("numberMissions"))
        {
            Object obj = soapObject.getProperty("numberMissions");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                numberMissions = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                numberMissions = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("numberMissionsSpecified"))
        {
            Object obj = soapObject.getProperty("numberMissionsSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                numberMissionsSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                numberMissionsSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("onePhoto"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("onePhoto");
            onePhoto =  new media (j);
            
        }
        if (soapObject.hasProperty("onePseudo"))
        {
            Object obj = soapObject.getProperty("onePseudo");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                onePseudo = j.toString();
            }else if (obj!= null && obj instanceof String){
                onePseudo = (String) obj;
            }
        }
        if (soapObject.hasProperty("oneTypePhone"))
        {
            Object obj = soapObject.getProperty("oneTypePhone");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive)obj;
                oneTypePhone = typePhone.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("oneTypePhoneSpecified"))
        {
            Object obj = soapObject.getProperty("oneTypePhoneSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                oneTypePhoneSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                oneTypePhoneSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("oneUUID"))
        {
            Object obj = soapObject.getProperty("oneUUID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                oneUUID = j.toString();
            }else if (obj!= null && obj instanceof String){
                oneUUID = (String) obj;
            }
        }
        if (soapObject.hasProperty("paypalMail"))
        {
            Object obj = soapObject.getProperty("paypalMail");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                paypalMail = j.toString();
            }else if (obj!= null && obj instanceof String){
                paypalMail = (String) obj;
            }
        }
        if (soapObject.hasProperty("points"))
        {
            Object obj = soapObject.getProperty("points");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                points = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                points = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("pointsSpecified"))
        {
            Object obj = soapObject.getProperty("pointsSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                pointsSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                pointsSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("ribKey"))
        {
            Object obj = soapObject.getProperty("ribKey");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                ribKey = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                ribKey = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("ribKeySpecified"))
        {
            Object obj = soapObject.getProperty("ribKeySpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                ribKeySpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                ribKeySpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("totalcash"))
        {
            Object obj = soapObject.getProperty("totalcash");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalcash = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                totalcash = (Double) obj;
            }
        }
        if (soapObject.hasProperty("totalcashSpecified"))
        {
            Object obj = soapObject.getProperty("totalcashSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                totalcashSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                totalcashSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("waitcash"))
        {
            Object obj = soapObject.getProperty("waitcash");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                waitcash = Double.parseDouble(j.toString());
            }else if (obj!= null && obj instanceof Number){
                waitcash = (Double) obj;
            }
        }
        if (soapObject.hasProperty("waitcashSpecified"))
        {
            Object obj = soapObject.getProperty("waitcashSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                waitcashSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                waitcashSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("waitpoints"))
        {
            Object obj = soapObject.getProperty("waitpoints");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                waitpoints = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                waitpoints = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("waitpointsSpecified"))
        {
            Object obj = soapObject.getProperty("waitpointsSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                waitpointsSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                waitpointsSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("birthday"))
        {
            Object obj = soapObject.getProperty("birthday");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                birthday = j.toString();
            }else if (obj!= null && obj instanceof String){
                birthday = (String) obj;
            }
        }
        if (soapObject.hasProperty("birthdaySpecified"))
        {
            Object obj = soapObject.getProperty("birthdaySpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                birthdaySpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                birthdaySpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("birthplace"))
        {
            Object obj = soapObject.getProperty("birthplace");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                birthplace = j.toString();
            }else if (obj!= null && obj instanceof String){
                birthplace = (String) obj;
            }
        }
        if (soapObject.hasProperty("civility"))
        {
            Object obj = soapObject.getProperty("civility");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive)obj;
                civility = civility.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("civilitySpecified"))
        {
            Object obj = soapObject.getProperty("civilitySpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                civilitySpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                civilitySpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("email"))
        {
            Object obj = soapObject.getProperty("email");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                email = j.toString();
            }else if (obj!= null && obj instanceof String){
                email = (String) obj;
            }
        }
        if (soapObject.hasProperty("familyStatus"))
        {
            Object obj = soapObject.getProperty("familyStatus");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive)obj;
                familyStatus = familyStatus.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("familyStatusSpecified"))
        {
            Object obj = soapObject.getProperty("familyStatusSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                familyStatusSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                familyStatusSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("firstName"))
        {
            Object obj = soapObject.getProperty("firstName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                firstName = j.toString();
            }else if (obj!= null && obj instanceof String){
                firstName = (String) obj;
            }
        }
        if (soapObject.hasProperty("homePhone"))
        {
            Object obj = soapObject.getProperty("homePhone");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                homePhone = j.toString();
            }else if (obj!= null && obj instanceof String){
                homePhone = (String) obj;
            }
        }
        if (soapObject.hasProperty("id"))
        {
            Object obj = soapObject.getProperty("id");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                id = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                id = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("idSpecified"))
        {
            Object obj = soapObject.getProperty("idSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                idSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                idSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("mobilePhone"))
        {
            Object obj = soapObject.getProperty("mobilePhone");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                mobilePhone = j.toString();
            }else if (obj!= null && obj instanceof String){
                mobilePhone = (String) obj;
            }
        }
        if (soapObject.hasProperty("name"))
        {
            Object obj = soapObject.getProperty("name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                name = j.toString();
            }else if (obj!= null && obj instanceof String){
                name = (String) obj;
            }
        }
        if (soapObject.hasProperty("nationality"))
        {
            Object obj = soapObject.getProperty("nationality");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                nationality = j.toString();
            }else if (obj!= null && obj instanceof String){
                nationality = (String) obj;
            }
        }
        if (soapObject.hasProperty("oneAddress"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("oneAddress");
            oneAddress =  new address (j);
            
        }
        if (soapObject.hasProperty("dateCreated"))
        {
            Object obj = soapObject.getProperty("dateCreated");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateCreated = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateCreated = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateCreatedSpecified"))
        {
            Object obj = soapObject.getProperty("dateCreatedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateCreatedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateCreatedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("dateDeleted"))
        {
            Object obj = soapObject.getProperty("dateDeleted");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateDeleted = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateDeleted = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateDeletedSpecified"))
        {
            Object obj = soapObject.getProperty("dateDeletedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateDeletedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateDeletedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("dateUpdated"))
        {
            Object obj = soapObject.getProperty("dateUpdated");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateUpdated = j.toString();
            }else if (obj!= null && obj instanceof String){
                dateUpdated = (String) obj;
            }
        }
        if (soapObject.hasProperty("dateUpdatedSpecified"))
        {
            Object obj = soapObject.getProperty("dateUpdatedSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                dateUpdatedSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                dateUpdatedSpecified = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("oneFlag"))
        {
            Object obj = soapObject.getProperty("oneFlag");
            if (obj!= null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive)obj;
                oneFlag = flag.fromString(j.toString());
            }
        }
        if (soapObject.hasProperty("oneFlagSpecified"))
        {
            Object obj = soapObject.getProperty("oneFlagSpecified");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                oneFlagSpecified = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                oneFlagSpecified = (Boolean) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return accountNumber;
            case 1:
                return balancecash;
            case 2:
                return balancecashSpecified;
            case 3:
                return bankCode;
            case 4:
                return bankCodeSpecified;
            case 5:
                return bicId;
            case 6:
                return guichetCode;
            case 7:
                return guichetCodeSpecified;
            case 8:
                return ibanId;
            case 9:
                return numberMissions;
            case 10:
                return numberMissionsSpecified;
            case 11:
                return onePhoto;
            case 12:
                return onePseudo;
            case 13:
                return oneTypePhone.toString();
            case 14:
                return oneTypePhoneSpecified;
            case 15:
                return oneUUID;
            case 16:
                return paypalMail;
            case 17:
                return points;
            case 18:
                return pointsSpecified;
            case 19:
                return ribKey;
            case 20:
                return ribKeySpecified;
            case 21:
                return totalcash;
            case 22:
                return totalcashSpecified;
            case 23:
                return waitcash;
            case 24:
                return waitcashSpecified;
            case 25:
                return waitpoints;
            case 26:
                return waitpointsSpecified;
            case 27:
                return birthday;
            case 28:
                return birthdaySpecified;
            case 29:
                return birthplace;
            case 30:
                return civility.toString();
            case 31:
                return civilitySpecified;
            case 32:
                return email;
            case 33:
                return familyStatus.toString();
            case 34:
                return familyStatusSpecified;
            case 35:
                return firstName;
            case 36:
                return homePhone;
            case 37:
                return id;
            case 38:
                return idSpecified;
            case 39:
                return mobilePhone;
            case 40:
                return name;
            case 41:
                return nationality;
            case 42:
                return oneAddress;
            case 43:
                return dateCreated;
            case 44:
                return dateCreatedSpecified;
            case 45:
                return dateDeleted;
            case 46:
                return dateDeletedSpecified;
            case 47:
                return dateUpdated;
            case 48:
                return dateUpdatedSpecified;
            case 49:
                return oneFlag.toString();
            case 50:
                return oneFlagSpecified;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 51;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "accountNumber";
                break;
            case 1:
                info.type = Double.class;
                info.name = "balancecash";
                break;
            case 2:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "balancecashSpecified";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "bankCode";
                break;
            case 4:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "bankCodeSpecified";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "bicId";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "guichetCode";
                break;
            case 7:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "guichetCodeSpecified";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ibanId";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "numberMissions";
                break;
            case 10:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "numberMissionsSpecified";
                break;
            case 11:
                info.type = media.class;
                info.name = "onePhoto";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "onePseudo";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "oneTypePhone";
                break;
            case 14:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "oneTypePhoneSpecified";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "oneUUID";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "paypalMail";
                break;
            case 17:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "points";
                break;
            case 18:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "pointsSpecified";
                break;
            case 19:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "ribKey";
                break;
            case 20:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "ribKeySpecified";
                break;
            case 21:
                info.type = Double.class;
                info.name = "totalcash";
                break;
            case 22:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "totalcashSpecified";
                break;
            case 23:
                info.type = Double.class;
                info.name = "waitcash";
                break;
            case 24:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "waitcashSpecified";
                break;
            case 25:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "waitpoints";
                break;
            case 26:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "waitpointsSpecified";
                break;
            case 27:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "birthday";
                break;
            case 28:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "birthdaySpecified";
                break;
            case 29:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "birthplace";
                break;
            case 30:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "civility";
                break;
            case 31:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "civilitySpecified";
                break;
            case 32:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "email";
                break;
            case 33:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "familyStatus";
                break;
            case 34:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "familyStatusSpecified";
                break;
            case 35:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "firstName";
                break;
            case 36:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "homePhone";
                break;
            case 37:
                info.type = Long.class;
                info.name = "id";
                break;
            case 38:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "idSpecified";
                break;
            case 39:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "mobilePhone";
                break;
            case 40:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "name";
                break;
            case 41:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "nationality";
                break;
            case 42:
                info.type = address.class;
                info.name = "oneAddress";
                break;
            case 43:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dateCreated";
                break;
            case 44:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dateCreatedSpecified";
                break;
            case 45:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dateDeleted";
                break;
            case 46:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dateDeletedSpecified";
                break;
            case 47:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dateUpdated";
                break;
            case 48:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "dateUpdatedSpecified";
                break;
            case 49:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "oneFlag";
                break;
            case 50:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "oneFlagSpecified";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
